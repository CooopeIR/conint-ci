image: docker:latest

services:
  - docker:dind

stages:
  - lint
  - build
  - test
  - deliver
  - deploy

snyk-check:
  stage: lint
  tags:
    - lint
  image:
    name: snyk/snyk-cli:docker
    entrypoint: [""]
  script:
    # - docker build -t app:$CI_COMMIT_SHORT_SHA .
    - snyk auth $SNYK_TOKEN
    - snyk test --all-projects --org=3eef733d-b6ce-4399-8f32-3691e465a4e1
    - snyk monitor --all-projects --org=3eef733d-b6ce-4399-8f32-3691e465a4e1
  allow_failure: true # set false to fail on vulnerabilities
  only:
    - merge_requests
    - main


sonarqube-check:
  stage: lint
  tags:
    - lint
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: false # set false to fail on errors
  only:
    - merge_requests
    - main


build_backend:
  stage: build
  tags:
    - build
  needs:
    # - sonarqube-check
    # - snyk-check
  script:
    - echo "build backend"
    - docker system prune -f
    - docker build -t cooopeir/conint:latest ./backend

build_blue:
  stage: build
  tags:
    - build
  needs:
    # - sonarqube-check
    # - snyk-check  
  script:
    - echo "build blue"
    - docker system prune -f
    - docker build -t cooopeir/conint_frontend:blue ./frontend_blue

build_green:
  stage: build
  tags:
    - build
  needs:
    # - sonarqube-check
    # - snyk-check  
  script:
    - echo "build green"
    - docker system prune -f
    - docker build -t cooopeir/conint_frontend:green ./frontend_green

test_backend:
  stage: test
  tags:
    - test
  script:
    - echo "Running tests on backend..."
    - docker system prune -f
  #   # Add your test commands here

test_green:
  stage: test
  tags:
    - test
  script:
    - echo "Running tests on green..."
    - docker system prune -f
  #   # Add your test commands here


test_blue:
  stage: test
  image: 
  tags:
    - test
  script:
    - echo "Running tests on Vue.js frontend..."
    # - docker system prune -f
    - cd frontend_blue  # Change directory to your Vue.js project
    - npm install  # Or 'yarn install' if you're using yarn
    - npm run test
    # - npm run lint  # Run linter
    # - npm run test:unit  # Run unit tests
    # - npm run test:e2e  # Run end-to-end tests

deliver_backend:
  stage: deliver
  tags:
    - deliver
  needs:
    - test_backend
  script:
    - docker system prune -f
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push cooopeir/conint:latest
    - echo "Delivering backend to staging/production"
  #   # Add deployment steps here (e.g., SSH into EC2, pull and restart containers for green)

deliver_blue:
  stage: deliver
  tags:
    - deliver
  needs:
    - test_blue
  script:
    - echo "Delivering Blue to Docker Hub"
    - docker system prune -f
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push cooopeir/conint_frontend:blue

deliver_green:
  stage: deliver
  tags:
    - deliver
  needs:
    - test_green
  script:
    - echo "Delivering Green to Docker Hub"
    - docker system prune -f
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push cooopeir/conint_frontend:green


deploy_backend:
  stage: deploy
  needs:
    - deliver_backend
  before_script:
    - apt-get update -qq
    - apt-get install -qq -y sshpass
  script:
    - echo "Deploying backend..."
    - sshpass -e scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@10.0.0.31:/home/ubuntu/
    - sshpass -e ssh -o StrictHostKeyChecking=no ubuntu@10.0.0.31 << 'EOF'
        docker-compose -f /home/ubuntu/docker-compose.yml down
        docker system prune -f
        docker-compose -f /home/ubuntu/docker-compose.yml up -d
      EOF


deploy_blue:
  stage: deploy
  needs:
    - deliver_blue
  before_script:
    - apt-get update -qq
    - apt-get install -qq -y sshpass
  script:
    - echo "Deploying backend..."
    - sshpass -e scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@10.0.0.18:/home/ubuntu/
    - sshpass -e ssh -o StrictHostKeyChecking=no ubuntu@10.0.0.18 << 'EOF'
        docker-compose -f /home/ubuntu/docker-compose.yml down
        docker system prune -f
        docker-compose -f /home/ubuntu/docker-compose.yml up -d
      EOF

deploy_green:
  stage: deploy
  needs:
    - deliver_green
  before_script:
    - apt-get update -qq
    - apt-get install -qq -y sshpass
  script:
    - echo "Deploying backend..."
    - sshpass -e scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@10.0.0.35:/home/ubuntu/
    - sshpass -e ssh -o StrictHostKeyChecking=no ubuntu@10.0.0.35 << 'EOF'
        docker-compose -f /home/ubuntu/docker-compose.yml down
        docker system prune -f
        docker-compose -f /home/ubuntu/docker-compose.yml up -d
      EOF

update_nginx:
  stage: deploy
  tags:
    - deploy
  script:
    - echo "Updating nginx configuration..."
    - scp -i /path/to/your/private/key $NGINX_CONFIG_PATH ec2-user@blue_instance_ip:/tmp/nginx.conf
    - ssh -i /path/to/your/private/key ec2-user@blue_instance_ip sudo mv /tmp/nginx.conf $NGINX_CONFIG_PATH
    - ssh -i /path/to/your/private/key ec2-user@blue_instance_ip sudo systemctl reload nginx
    - echo "Nginx configuration updated for blue instance"

    - scp -i /path/to/your/private/key $NGINX_CONFIG_PATH ec2-user@green_instance_ip:/tmp/nginx.conf
    - ssh -i /path/to/your/private/key ec2-user@green_instance_ip sudo mv /tmp/nginx.conf $NGINX_CONFIG_PATH
    - ssh -i /path/to/your/private/key ec2-user@green_instance_ip sudo systemctl reload nginx
    - echo "Nginx configuration updated for green instance"